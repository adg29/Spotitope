<style>
  code.block{
    width: 870px;
    display: block;
  }

  .result{
    color: #fff;
    background: #000;
    width: 110px;
    height: 110px;
    padding: 8px;
    margin: 5px;
    float: left;
    overflow: hidden;
    position: relative;
    -webkit-border-top-right-radius: 1.2em;
        -moz-border-radius-topright: 1.2em;
            border-top-right-radius: 1.2em;
  }

  .result h3{
    line-height: 14px;
  }

  /**** Isotope Filtering ****/

  .isotope-item {
    z-index: 2;
  }

  .isotope-hidden.isotope-item {
    pointer-events: none;
    z-index: 1;
  }

  /**** Isotope CSS3 transitions ****/

  .isotope,
  .isotope .isotope-item {
    -webkit-transition-duration: 0.8s;
       -moz-transition-duration: 0.8s;
        -ms-transition-duration: 0.8s;
         -o-transition-duration: 0.8s;
            transition-duration: 0.8s;
  }

  .isotope {
    -webkit-transition-property: height, width;
       -moz-transition-property: height, width;
        -ms-transition-property: height, width;
         -o-transition-property: height, width;
            transition-property: height, width;
  }

  .isotope .isotope-item {
    -webkit-transition-property: -webkit-transform, opacity;
       -moz-transition-property:    -moz-transform, opacity;
        -ms-transition-property:     -ms-transform, opacity;
         -o-transition-property:         top, left, opacity;
            transition-property:         transform, opacity;
  }

  /**** disabling Isotope CSS3 transitions ****/

  .isotope.no-transition,
  .isotope.no-transition .isotope-item,
  .isotope .isotope-item.no-transition {
    -webkit-transition-duration: 0s;
       -moz-transition-duration: 0s;
        -ms-transition-duration: 0s;
         -o-transition-duration: 0s;
            transition-duration: 0s;
  }
</style>

<script type="text/javascript">

JSON.prettify = function(json) {
  return JSON.stringify(json, null, '\t');
}
function log(msg) {
  if (console && console.log) {
    console.log(msg)
  }
}

var client_id = 'NSIPH2PMNNT54J5RANXTVINNQTV3HA1OGFECTM1ZUFTTQ5GT';
var callback_url = 'http://<%= request.env['HTTP_HOST'] %>/pages/about';

/* Attempt to retrieve access token from URL. */
if ($.bbq.getState('access_token')) {
  var token = $.bbq.getState('access_token');
  //$.bbq.pushState({}, 2)
} else if ($.bbq.getState('error')) {
} else {
  /* Redirect for foursquare authentication. */
  window.location.href = 'https://foursquare.com/oauth2/authenticate?client_id=' + client_id
  + '&response_type=token&redirect_uri=' + callback_url;
}  



$(function(){
  var AppRouter = Backbone.Router.extend({
    routes: {
      'search/spotify/:method/:query': "searchSpotify"
    },

    searchSpotify: function(method,query){
        log('Searching for ' + method + ' called ' + query);
        $('#query').val(query);
        $('#method').val(method);

        var method = "track";
        log('defaulting to track');

      $.spotifydata(method, query, function(data) {
        console.log( data.tracks.length );
        Results.resetSpotifyData(data);
        Results.renderSpotifyData();
      })

    }
  });

  var AppView = Backbone.View.extend({
    el: $('#view-search'),

    events: {
      'submit #search': 'searchSubmit'
    },

    initialize: function(){
    },

    searchSubmit: function(e){
      e.preventDefault();
      console.log('searchSubmit');
      Router.navigate('search/spotify/'+$('#method').val()+'/'+$('#query').val(),{trigger: true});
    }
  });

  var AppResultsView = Backbone.View.extend({
    el: $('#view-results'),
    spotifyData: {},
    spotifyResult: Handlebars.compile( $('#spotify-result-template').html() ),

    initialize: function(){
      $('#results-isotope').isotope({
        // options
        itemSelector : '.result',
        layoutMode : 'fitRows',
        filter: ''
      });
    },
    
    resetSpotifyData: function(data){
      spotifyData=data;
    },
    renderSpotifyData: function(){
      $('#results-isotope').fadeOut().isotope('remove',$('.result')).fadeIn();
      $('#results-json').show().find('pre').text(JSON.prettify(spotifyData));
      instance = this;
      var new_data = '';
      _.each( spotifyData.tracks, function( t,i ){
        var track_d = t.name;
        var artist_d = t.artists[0].name;
        new_data += instance.spotifyResult({track: track_d,artist: artist_d});
        
      });
      $('#results-isotope').isotope( 'insert', $(new_data) );
    }
  });

  var App = new AppView();
  var Router = new AppRouter();
  var Results = new AppResultsView();
  Backbone.history.start({pushState: true, root: '/pages/about/'});
});


</script>
<div id="view-search">
  <h2>We like to be inspired by music. </h2>
  <h3>Start with a search for <b>music</b> that inspires you.</h3>

  <form class="well form-search" id="search" method="get">
    <label for="method">Method</label>
    <select name="method" id="method">
      <option value="track">Track</option>
      <option value="album">Album</option>
      <option value="artist">Artist</option>
    </select>
    <label for="query">Query</label>
    <input type="text" name="query" placeholder="Shout" id="query" class="input-medium search-query" >
    <input type="submit" name="search" value="Search" id="search" class="btn">
  </form>
</div>
<div id="view-results">
  <div id="results-isotope">
  </div>
  <code class="block" id="results-json"><pre></pre></code>
</div>

<script id="spotify-result-template" type="text/x-handlebars-template">
  <div class="spotify result">
    <h3>{{track}}</h3>
    <h4>by {{artist}}</h4>
  </div>
</script>
